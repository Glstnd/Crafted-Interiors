import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import orderService from '../../services/OrderService';
import './OrdersPage.css';

const OrdersPage = () => {
    const navigate = useNavigate();
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [viewMode, setViewMode] = useState("grid");
    const [showCreateForm, setShowCreateForm] = useState(false);
    const [createForm, setCreateForm] = useState({
        public_id: '',
        total_amount: '',
        status: 'pending',
        items: [{ product_tag: '', quantity: 1, unit_price: '' }],
    });
    const [createLoading, setCreateLoading] = useState(false);
    const [createError, setCreateError] = useState(null);
    const [createSuccess, setCreateSuccess] = useState(false);

    useEffect(() => {
        const fetchOrders = async () => {
            setLoading(true);
            setError(null);
            try {
                const fetchedOrders = await orderService.getOrders();
                setOrders(fetchedOrders);
            } catch (err) {
                setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
            } finally {
                setLoading(false);
            }
        };
        fetchOrders();
    }, []);

    const translateStatus = (status) => {
        const statusMap = {
            pending: '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è',
            processing: '–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è',
            shipped: '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
            completed: '–ó–∞–≤–µ—Ä—à—ë–Ω',
        };
        return statusMap[status] || status;
    };

    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        });
    };

    const handleEdit = (orderId) => {
        navigate(`/admin/orders/${orderId}`);
    };

    const handleAddItem = () => {
        setCreateForm({
            ...createForm,
            items: [...createForm.items, { product_tag: '', quantity: 1, unit_price: '' }],
        });
    };

    const handleRemoveItem = (index) => {
        if (createForm.items.length === 1) return; // –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const newItems = createForm.items.filter((_, i) => i !== index);
        setCreateForm({ ...createForm, items: newItems });
    };

    const handleItemChange = (index, field, value) => {
        const newItems = [...createForm.items];
        newItems[index][field] = value;
        setCreateForm({ ...createForm, items: newItems });
    };

    const handleCreateOrder = async () => {
        setCreateLoading(true);
        setCreateError(null);
        setCreateSuccess(false);

        try {
            const orderData = {
                public_id: createForm.public_id,
                total_amount: parseFloat(createForm.total_amount),
                status: createForm.status,
                items: createForm.items.map(item => ({
                    product_tag: item.product_tag,
                    quantity: parseInt(item.quantity),
                    unit_price: parseFloat(item.unit_price),
                })),
            };

            const newOrder = await orderService.createOrder(orderData);
            setOrders([newOrder, ...orders]);
            setCreateSuccess(true);
            setShowCreateForm(false);
            setCreateForm({
                public_id: '',
                total_amount: '',
                status: 'pending',
                items: [{ product_tag: '', quantity: 1, unit_price: '' }],
            });
            setTimeout(() => setCreateSuccess(false), 5000);
        } catch (err) {
            setCreateError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑');
            setTimeout(() => setCreateError(null), 5000);
        } finally {
            setCreateLoading(false);
        }
    };

    if (loading) {
        return <div className="orders-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    if (error) {
        return <div className="orders-error">{error}</div>;
    }

    return (
        <div className="orders-page">
            <h1>–í—Å–µ –∑–∞–∫–∞–∑—ã</h1>

            <div className="controls-section">
                <button
                    className="create-order-button"
                    onClick={() => setShowCreateForm(!showCreateForm)}
                >
                    {showCreateForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
                </button>

                <div className="view-controls">
                    <button
                        className={`view-button ${viewMode === "grid" ? "active" : ""}`}
                        onClick={() => setViewMode("grid")}
                    >
                        <span className="icon-grid">üóá</span> –°–µ—Ç–∫–∞
                    </button>
                    <button
                        className={`view-button ${viewMode === "list" ? "active" : ""}`}
                        onClick={() => setViewMode("list")}
                    >
                        <span className="icon-list">‚â°</span> –°–ø–∏—Å–æ–∫
                    </button>
                </div>
            </div>

            {showCreateForm && (
                <div className="create-form">
                    <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</h2>
                    <div className="form-field">
                        <label>Public ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
                        <input
                            type="text"
                            value={createForm.public_id}
                            onChange={(e) => setCreateForm({ ...createForm, public_id: e.target.value })}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        />
                    </div>
                    <div className="form-field">
                        <label>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (‚ÇΩ):</label>
                        <input
                            type="number"
                            value={createForm.total_amount}
                            onChange={(e) => setCreateForm({ ...createForm, total_amount: e.target.value })}
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                            min="0"
                            step="0.01"
                        />
                    </div>
                    <div className="form-field">
                        <label>–°—Ç–∞—Ç—É—Å:</label>
                        <select
                            value={createForm.status}
                            onChange={(e) => setCreateForm({ ...createForm, status: e.target.value })}
                        >
                            <option value="pending">–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è</option>
                            <option value="processing">–ò–∑–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è</option>
                            <option value="shipped">–í –¥–æ—Å—Ç–∞–≤–∫–µ</option>
                            <option value="completed">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
                        </select>
                    </div>
                    <h3>–¢–æ–≤–∞—Ä—ã</h3>
                    {createForm.items.map((item, index) => (
                        <div key={index} className="item-form">
                            <div className="form-field">
                                <label>–¢–µ–≥ —Ç–æ–≤–∞—Ä–∞:</label>
                                <input
                                    type="text"
                                    value={item.product_tag}
                                    onChange={(e) => handleItemChange(index, 'product_tag', e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ —Ç–æ–≤–∞—Ä–∞"
                                />
                            </div>
                            <div className="form-field">
                                <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</label>
                                <input
                                    type="number"
                                    value={item.quantity}
                                    onChange={(e) => handleItemChange(index, 'quantity', e.target.value)}
                                    min="1"
                                />
                            </div>
                            <div className="form-field">
                                <label>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (‚ÇΩ):</label>
                                <input
                                    type="number"
                                    value={item.unit_price}
                                    onChange={(e) => handleItemChange(index, 'unit_price', e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                                    min="0"
                                    step="0.01"
                                />
                            </div>
                            <button
                                className="remove-item-button"
                                onClick={() => handleRemoveItem(index)}
                                disabled={createForm.items.length === 1}
                            >
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    ))}
                    <button className="add-item-button" onClick={handleAddItem}>
                        –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </button>
                    <button
                        className="submit-order-button"
                        onClick={handleCreateOrder}
                        disabled={createLoading}
                    >
                        {createLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
                    </button>
                </div>
            )}

            {orders.length === 0 ? (
                <p className="orders-empty">–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
            ) : (
                <div className={`orders-list ${viewMode === "grid" ? "grid-view" : "list-view"}`}>
                    {orders.map((order) => (
                        <div
                            key={order.id}
                            className={`order-card ${viewMode === "list" ? "list-item" : ""}`}
                        >
                            <div className="order-field">
                                <span className="order-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</span>
                                <span className="order-value">{order.id}</span>
                            </div>
                            <div className="order-field">
                                <span className="order-label">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</span>
                                <span className="order-value">{formatDate(order.created_at)}</span>
                            </div>
                            <div className="order-field">
                                <span className="order-label">–°—Ç–∞—Ç—É—Å:</span>
                                <span className={`order-value status-${order.status}`}>
                                    {translateStatus(order.status)}
                                </span>
                            </div>
                            <div className="order-field">
                                <span className="order-label">–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</span>
                                <span className="order-value">{order.total_amount} ‚ÇΩ</span>
                            </div>
                            <div className="order-field">
                                <span className="order-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                                <span className="order-value">{order.user_id}</span>
                            </div>
                            <button
                                className="edit-button"
                                onClick={() => handleEdit(order.id)}
                            >
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                        </div>
                    ))}
                </div>
            )}

            {createSuccess && (
                <div className="create-success-message">
                    –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
                </div>
            )}

            {createError && (
                <div className="create-error-message">
                    {createError}
                </div>
            )}
        </div>
    );
};

export default OrdersPage;